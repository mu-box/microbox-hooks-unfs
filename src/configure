#!/usr/bin/env ruby

# hookit is installed as a bundled app, so we need bundler to load it for us
$:.unshift  '/opt/gomicro/hookit/vendor/bundle'
require 'bundler/setup'

# load hookit/setup to bootstrap hookit and import the dsl
require 'hookit/setup'

directory '/asdf/data/etc' do
  recursive true
end

directory '/opt/gomicro/etc/ssh' do
  recursive true
end

directory '/asdf/data/var/db/unfs' do
  recursive true
end

# chown /asdf/data/var/db/unfs for gomicro
execute 'chown /asdf/data/var/db/unfs' do
  command 'chown -R gomicro:gomicro /asdf/data/var/db/unfs'
end

file '/asdf/data/etc/exports' do
  mode 0644
  owner 'gomicro'
  group 'gomicro'
  content <<-EOF
/asdf/data/var/db/unfs 0.0.0.0/0(rw,no_root_squash,insecure)
  EOF
end

# make sure the env dir exists
directory "/asdf/data/etc/env.d" do
  recursive true
end

# and that it's owned by gomicro
execute "chown gomicro /asdf/data/etc/env.d"

(payload[:env] || {}).each do |key, value|
  file "/asdf/data/etc/env.d/#{key}" do
    content value
    owner 'gomicro'
    group 'gomicro'
    mode 0444
  end
end

if payload[:logvac_host]
  # Configure narc
  template '/opt/gomicro/etc/narc.conf' do
    variables ({ uid: payload[:component][:uid], logvac: payload[:logvac_host] })
  end
  # ensure log files are created
  ["/var/log/gomicro/storage/current"].each do |log_file|
    if not ::File.exists? "#{log_file}"
      parent = File.expand_path("..", "#{log_file}")
      
      # create the parent directory
      directory parent do
        owner 'gomicro'
        group 'gomicro'
        recursive true
      end
      
      # create the log_file
      file "#{log_file}" do
        owner 'gomicro'
        group 'gomicro'
        mode  0644
      end
    end
  end

  directory '/etc/service/narc'

  template '/etc/service/narc/run' do
    mode 0755
    source 'run-root.erb'
    variables ({ exec: "/opt/gomicro/bin/narcd /opt/gomicro/etc/narc.conf" })
  end
end

payload[:users].each do |user|
  execute "echo \"#{user[:username]}:#{user[:password]}\" | chpasswd"
end

# Create some ssh host keys
execute "ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N '' -t rsa" do
  not_if { ::File.exists? '/etc/ssh/ssh_host_rsa_key' }
end

execute "ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N '' -t dsa" do
  not_if { ::File.exists? '/etc/ssh/ssh_host_dsa_key' }
end

execute "ssh-keygen -f /etc/ssh/ssh_host_ecdsa_key -N '' -t ecdsa" do
  not_if { ::File.exists? '/etc/ssh/ssh_host_ecdsa_key' }
end

execute "ssh-keygen -f /etc/ssh/ssh_host_ed25519_key -N '' -t ed25519" do
  not_if { ::File.exists? '/etc/ssh/ssh_host_ed25519_key' }
end

if payload[:platform] != 'local'

  # Setup root keys for data migrations
  directory '/root/.ssh' do
    recursive true
  end

  file '/root/.ssh/id_rsa' do
    content payload[:ssh][:admin_key][:private_key]
    mode 0600
  end

  file '/root/.ssh/id_rsa.pub' do
    content payload[:ssh][:admin_key][:public_key]
  end

  file '/root/.ssh/authorized_keys' do
    content payload[:ssh][:admin_key][:public_key]
  end

end

# Install extra packages

# Add extra paths
if payload[:extra_path_dirs] && payload[:extra_path_dirs].length > 0
  directory "/asdf/data/etc/env.d" do
    recursive true
    owner 'gomicro'
    group 'gomicro'
  end

  file "/asdf/data/etc/env.d/EXTRA_PATHS" do
    content payload[:extra_path_dirs].join(":")
    owner 'gomicro'
    group 'gomicro'
    mode 0444
  end
end

if payload[:extra_packages]
  execute "Install packages" do
    command "apk add #{payload[:extra_packages].join(' ')}"
    path "/asdf/data/sbin:/asdf/data/bin:/opt/gomicro/sbin:/opt/gomicro/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
    user 'root'
  end
end

if payload[:extra_steps]
  payload[:extra_steps].each_with_index do |cmd, i|

    execute "Extra Step: #{cmd}" do
      command "bash -i -l -c \"#{escape cmd}\""
      cwd "/asdf/data"
      path "/asdf/data/sbin:/asdf/data/bin:/opt/gomicro/sbin:/opt/gomicro/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
      user 'gomicro'
    end
  end
end

# Set up cron
if payload[:member][:uid] == 1 && ! payload[:cron_jobs].nil?
  include Hookit::Helper::Cron
  include Hookit::Helper::Shell

  directory '/opt/microbox/cron/'

  payload[:cron_jobs].each_with_index do |job, id|
    template "/opt/microbox/cron/#{job[:id]}" do
      owner 'gomicro'
      source 'cron.erb'
      group 'gomicro'
      mode 0755
      variables ({
        component_uid: payload[:component][:uid],
        member_uid: payload[:member][:uid],
        logvac_host: payload[:logvac_host],
        command: escape_shell_string(job[:command]),
        cron_id: id + 1
      })
    end
  end

  template '/etc/crontabs/root' do
    source 'crontab.erb'
    mode 0644
    variables ({ crons: payload[:cron_jobs] })
  end

end
